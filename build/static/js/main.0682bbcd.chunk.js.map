{"version":3,"sources":["pages/home_page.jsx","pages/contact_page.jsx","navigation-bar/navigation-bar.jsx","app.jsx","serviceWorker.js","index.jsx"],"names":["useStyles","makeStyles","homePage","minHeight","paddingTop","paragraph","marginTop","padding","title1","color","marginBlock","title2","paddingBlock","paddingLeft","HomePage","classes","className","Typography","contactPageLight","contactPageDark","backgroundColor","marginBottom","paragraph1","fontSize","paragraph2","ContactPage","React","useState","isDarkMode","setIsDarkMode","activeClassName","buttonText","userEmail","setEmail","userMessage","setMessage","a","axios","post","email","query","alert","console","log","style","display","flex","margin","variant","TextField","value","label","onChange","event","target","Button","onClick","NavigationBar","history","useHistory","navtitle","navbar","AppBar","Toolbar","push","App","CssBaseline","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NAIMA,EAAYC,IAAW,CAEzBC,SAAU,CAENC,UAAW,QACXC,WAAY,QAKhBC,UAAW,CAEPC,UAAW,OACXC,QAAS,QAIbC,OAAQ,CAEJC,MAAO,QACPC,YAAa,OACbH,QAAU,OAEdI,OAAQ,CAEJF,MAAO,QACPC,YAAa,OACbE,aAAa,OACbC,YAAa,UAKd,SAASC,IAEZ,IAAMC,EAAUf,IAChB,OAEI,sBAAKgB,UAAWD,EAAQb,SAAxB,UAGI,cAACe,EAAA,EAAD,CAAYD,UAAWD,EAAQV,UAA/B,+jBAUA,cAACY,EAAA,EAAD,CAAYD,UAAWD,EAAQJ,OAA/B,+EAMA,cAACM,EAAA,EAAD,CAAYD,UAAWD,EAAQJ,OAA/B,wO,wECtDNX,EAAYC,IAAW,CAEzBiB,iBAAkB,CAEdf,UAAW,QACXC,WAAY,OACZK,MAAO,SAIXU,gBAAiB,CAEbhB,UAAW,QACXC,WAAY,OAEZgB,gBAAiB,UACjBX,MAAO,SAIXJ,UAAW,CAEPC,UAAW,OACXe,aAAc,OACdd,QAAS,OAGbe,WAAY,CAERhB,UAAW,OACXC,QAAS,MACTgB,SAAU,IAIdC,WAAY,CAERlB,UAAW,OACXe,aAAc,OACdd,QAAS,MACTgB,SAAU,MAMX,SAASE,IAEZ,IAAMV,EAAUf,IAFU,EAIY0B,IAAMC,UAAS,GAJ3B,mBAIlBC,EAJkB,KAINC,EAJM,KAW1B,IAAMC,EAAkBF,EAAab,EAAQI,gBAAkBJ,EAAQG,iBAEjEa,EAAaH,EAAa,wBAA0B,uBAbhC,EAgBKF,IAAMC,SAAS,IAhBpB,mBAgBnBK,EAhBmB,KAgBRC,EAhBQ,OAiBSP,IAAMC,SAAS,IAjBxB,mBAiBnBO,EAjBmB,KAiBNC,EAjBM,iDA4C1B,sBAAAC,EAAA,+EAG0BC,IAAMC,KAAK,WAAY,CAACC,MAAOP,EAAWQ,MAAON,IAH3E,cAIQO,MAAM,cACNR,EAAS,IACTE,EAAW,IANnB,gDASQO,QAAQC,IAAR,MACAF,MAAM,oBAVd,0DA5C0B,sBA6D1B,OAEQ,sBAAKzB,UAAYc,EAAjB,UAEI,qBAAKc,MAAQ,CAAEC,QAAS,OAAQzC,WAAY,OAA5C,SAEI,sBAAKwC,MAAQ,CAAEE,KAAM,EAAGC,OAAQ,UAAhC,UAEI,cAAC9B,EAAA,EAAD,CAAYD,UAAYD,EAAQO,WAAhC,oCAIJ,cAACL,EAAA,EAAD,CAAYD,UAAWD,EAAQV,UAA/B,6CAID,cAACY,EAAA,EAAD,CAAYD,UAAYD,EAAQV,UAAhC,wCAIK,cAACY,EAAA,EAAD,CAAY+B,QAAU,KAAtB,wCAIA,sBAAKJ,MAAQ,CAAEE,KAAM,EAAGD,QAAS,OAAQvC,UAAW,QAApD,UAEI,cAAC2C,EAAA,EAAD,CACIC,MAAQlB,EACRmB,MAAM,SACNH,QAAQ,WACRI,SAAW,SAACC,GAAD,OAAWpB,EAASoB,EAAMC,OAAOJ,QAC5CN,MAAQ,CAAEE,KAAM,MAEnB,cAACG,EAAA,EAAD,CACGC,MAAQhB,EACRiB,MAAM,eACNH,QAAQ,WACRI,SAAW,SAACC,GAAD,OAAWlB,EAAWkB,EAAMC,OAAOJ,QAC9CN,MAAQ,CAAEE,KAAM,MAIpB,cAACS,EAAA,EAAD,CAAQC,QAvGN,2CAuGF,4BASD,cAACD,EAAA,EAAD,CACK9C,MAAQ,UACR+C,QA5G5B,WAEI3B,GAAeD,IAwGI,SAGOG,O,sBC/J3B,SAAS0B,IACZ,IAAMC,EAAUC,cAWhB,IAeM5C,EAfYd,IAAW,CAEzB2D,SAAU,CACN/C,YAAa,QACbH,YAAa,OACba,SAAU,IAGdsC,OAAO,CACHzC,gBAAiB,OACjBX,MAAO,UAKCT,GAEhB,OAEI,eAAC8D,EAAA,EAAD,CAAQ9C,UAAWD,EAAQ8C,OAA3B,UAEQ,cAAC5C,EAAA,EAAD,CAAYD,UAAWD,EAAQ6C,SAA/B,+BAOJ,eAACG,EAAA,EAAD,WAEI,cAACR,EAAA,EAAD,CACI9C,MAAM,UACN+C,QAxChB,WACIE,EAAQM,KAAK,UAqCL,kBAOA,cAACT,EAAA,EAAD,CACI9C,MAAM,UACN+C,QA3ChB,WACIE,EAAQM,KAAK,aAwCL,2B,aC5CD,SAASC,IAEpB,OAEI,eAAC,IAAD,WAEI,cAACC,EAAA,EAAD,IAEA,gCAEI,cAACT,EAAD,IAEA,eAAC,IAAD,WAEI,cAAC,IAAD,CAAOU,KAAM,WAAb,SACI,cAAC1C,EAAD,MAGJ,cAAC,IAAD,CAAO0C,KAAM,IAAb,SACI,cAACrD,EAAD,SAKR,8BACI,gFC3BAsD,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO,cAACT,EAAD,IAASU,SAASC,eAAe,SD6HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.0682bbcd.chunk.js","sourcesContent":["import React from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n\n    homePage: {\n\n        minHeight: '100vh',\n        paddingTop: '64px'\n\n\n    },\n    \n    paragraph: {\n\n        marginTop: '1rem',\n        padding: '64px'\n\n    },\n\n    title1: {\n         \n        color: 'black',\n        marginBlock: '1rem',\n        padding:  '5px',\n    },\n    title2: {\n         \n        color: 'black',\n        marginBlock: '1rem',\n        paddingBlock:'30px',\n        paddingLeft: '64px',\n    }\n\n});\n\nexport function HomePage() {\n\n    const classes = useStyles();\n    return (\n\n        <div className={classes.homePage}>\n   \n\n            <Typography className={classes.paragraph}>\n\n              High-integrity, team and results-focused contributor whom recently graduated from the University of New Haven with \n              a bachelor's degree in Computer Science. Experience volunteering and collaborating in professional team environments\n              to achieve desired goals and objectives. Skilled communicator with a strong work ethic, analytical and creative skills.\n              Seeking to secure a software engineering position that furthers company growth by leveraging professional and volunteer\n              experiences, technical, and interpersonal skills, with high-energy and a can-do attitude.\n\n            </Typography>\n           \n            <Typography className={classes.title2}>\n            \n            A simple yet fun project I worked on was a DLX Assembler in 2019. \n\n            </Typography>\n\n            <Typography className={classes.title2}>\n            I created a simple assembler for a DLX processor using C++ programming that read in arguments that passed as input from the command line, executed conversions, complex algorithms,\n            and generated read and write files.\n\n            </Typography>\n\n        </div>\n\n    )\n\n}","import React from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport { Typography } from \"@material-ui/core\";\nimport axios from 'axios';\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles({\n\n    contactPageLight: {\n\n        minHeight: '100vh',\n        paddingTop: '64px',\n        color: 'black'\n\n    },\n\n    contactPageDark: {\n\n        minHeight: '100vh',\n        paddingTop: '64px',\n\n        backgroundColor: '#505050',\n        color: 'white'\n\n    },\n\n    paragraph: {\n\n        marginTop: '1rem',\n        marginBottom: '1rem',\n        padding: '5px',\n    },\n\n    paragraph1: {\n\n        marginTop: '3rem',\n        padding: '5px',\n        fontSize: 20,\n        \n    },\n    \n    paragraph2: {\n\n        marginTop: '3rem',\n        marginBottom: '1rem',\n        padding: '5px',\n        fontSize: 20\n        \n    }\n\n});\n\nexport function ContactPage() {\n\n    const classes = useStyles();\n\n    const [ isDarkMode, setIsDarkMode ] = React.useState(false);\n\n    function handleAlternateTheme() {\n\n        setIsDarkMode(!isDarkMode);\n    }\n\n    const activeClassName = isDarkMode ? classes.contactPageDark : classes.contactPageLight;\n    //const pageDescription = isDarkMode ? 'dark' : 'light';\n    const buttonText = isDarkMode ? 'Switch to Light Theme' : 'Switch to Dark Theme';\n\n   // States for the comments fetched from the server and new comments to be added\n   const [ userEmail, setEmail ] = React.useState('');\n   const [ userMessage, setMessage ] = React.useState('');\n\n//    React.useEffect(() => {\n\n//        handleFetchComments();\n\n//    }, );\n\n    // async function handleSubmit () {\n    //     // schema (db) uses email, message\n    //     // contact page state uses userEmail, userMessage\n    //     const res = await axios.put('/contact', {email: userEmail, query: userMessage});\n    //     alert('Submitted!');\n    \n    // }\n    // async function handleFetchComments() {\n\n    //     try {\n    //         const response = await axios.get('/comments');\n    //         setComments(response.data);\n    //     }\n    //     catch (error) {\n    //         console.log(error);\n    //     }\n    // }\n\n    // Saves the newComment with a POST request to the server\n    async function handleSubmitButton() {\n\n        try {\n            const res = await axios.post('/contact', {email: userEmail, query: userMessage});\n            alert('Submitted!');\n            setEmail('');\n            setMessage('');\n        }\n        catch (error) {\n            console.log(error);\n            alert('Unable to submit');\n        }\n\n        \n\n    }\n\n    return (\n\n            <div className={ activeClassName }>\n\n                <div style={ { display: 'flex', paddingTop: '8vh' } }>\n    \n                    <div style={ { flex: 1, margin: '0 2rem' } }>\n                    \n                        <Typography className={ classes.paragraph1}>\n                         My Contact Information\n                        </Typography>\n\n                    <Typography className={classes.paragraph}>\n                        E-mail: Jalca1@unh.newhaven.edu\n                    </Typography>\n\n                   <Typography className={ classes.paragraph}>\n                        Phone Number: 333-333-3331\n                    </Typography>\n\n                        <Typography variant={ 'h5' }>\n                        Insert Contact Info Below!\n                        </Typography>\n    \n                        <div style={ { flex: 1, display: 'flex', marginTop: '1rem' } }>\n    \n                            <TextField\n                                value={ userEmail }\n                                label=\"E-mail\"\n                                variant=\"outlined\"\n                                onChange={ (event) => setEmail(event.target.value) }\n                                style={ { flex: 10 } }\n                            />\n                             <TextField\n                                value={ userMessage}\n                                label=\"Comment Text\"\n                                variant=\"outlined\"\n                                onChange={ (event) => setMessage(event.target.value) }\n                                style={ { flex: 10 } }\n                            />\n    \n    \n                            <Button onClick={ handleSubmitButton }>\n                                Submit\n                            </Button>\n\n                        </div>\n    \n                    </div>\n    \n                </div>\n                           <Button\n                                color={ 'inherit' }\n                                onClick={ handleAlternateTheme }>\n                                { buttonText }\n\n                            </Button>\n\n            </div>\n    \n    \n        )\n\n    \n    \n\n    //     <div className={ activeClassName }>\n\n    //         <Typography variant={ 'h4' }>\n\n    //            {/*  You are on the { pageDescription } theme Contact page!/ */}\n\n    //         </Typography>\n\n    //         <Typography className={ classes.paragraph1}>\n\n    //             My Contact Information\n        \n    //         </Typography>\n\n    //         <Typography className={classes.paragraph}>\n\n    //             E-mail: Jalca1@unh.newhaven.edu\n\n    //         </Typography>\n\n    //         <Typography className={ classes.paragraph}>\n\n    //             Phone Number: 333-333-3331\n        \n    //         </Typography>\n\n    //         <Typography className={ classes.paragraph2}>\n\n    //             Insert Contact Info Below!\n        \n    //         </Typography>\n            \n    //         {/* material-ui textfields */}\n    //         <form>\n    //             <label>\n    //                  E-mail or Phone Number:\n    //                 <input type=\"text\" name=\"name\" />\n    //             </label>\n    //                 <input type=\"submit\" value=\"Submit\" />  \n    //                  Success! \n\n    //                  {/* <Button variant=\"outlined\" onClick={handleClick}>\n    //                     Open success snackbar\n    //                 </Button>\n    //                     <Snackbar open={open} autoHideDuration={7000} onClose={handleClose}>\n    //                 <       Alert onClose={handleClose} severity=\"success\">\n    //                         Success Submission!\n    //                         </Alert>\n    //                      </Snackbar> */}\n    //         </form>\n\n    //         <Button\n    //             color={ 'inherit' }\n    //             onClick={ handleAlternateTheme }>\n\n    //             { buttonText }\n\n    //         </Button>\n\n    //     </div>\n\n    // )\n    \n}","import Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\n\nexport function NavigationBar() {\n    const history = useHistory();\n\n    \n    function handleHomeNavigation() {\n        history.push('/home');\n    }\n\n    function handleContactNavigation() {\n        history.push('/contact');\n\n    }\n    const useStyles = makeStyles({\n\n        navtitle: {\n            paddingLeft: '430px',\n            marginBlock: '1rem',\n            fontSize: 20\n        },\n\n        navbar:{\n            backgroundColor: 'pink',\n            color: 'black',\n        }\n    \n    });\n    \n    const classes = useStyles();\n\n    return (\n        \n        <AppBar className={classes.navbar}>\n\n                <Typography className={classes.navtitle}>\n\n                    Jenny's Portfolio\n\n                </Typography>\n\n\n            <Toolbar>\n\n                <Button\n                    color=\"inherit\"\n                    onClick={handleHomeNavigation}>\n\n                    Home\n                </Button>\n\n                <Button\n                    color=\"inherit\"\n                    onClick={handleContactNavigation}>\n\n                    Contact\n                </Button>\n\n            </Toolbar>\n\n        </AppBar>\n\n    )\n\n}","import React from \"react\";\n\nimport {\n    BrowserRouter,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nimport { HomePage } from \"./pages/home_page\";\nimport { ContactPage } from \"./pages/contact_page\";\nimport { NavigationBar } from \"./navigation-bar/navigation-bar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n\nexport default function App() {\n\n    return (\n\n        <BrowserRouter>\n\n            <CssBaseline />\n\n            <div>\n\n                <NavigationBar />\n\n                <Switch>\n\n                    <Route path={'/contact'}>\n                        <ContactPage/>\n                    </Route>\n\n                    <Route path={'/'}>\n                        <HomePage/>\n                    </Route>\n\n                </Switch>\n\n                <div>\n                    <p>Jennifer Alcantara's Website Portfolio </p>\n                </div>\n\n            </div>\n\n        </BrowserRouter>\n\n    );\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\n// Replace the div in public/index.html with the ID of root with our React app!\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Ignore the following\nserviceWorker.unregister();\n"],"sourceRoot":""}